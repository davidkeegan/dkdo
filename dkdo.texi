\input texinfo @c -*-texinfo-*-

@setfilename dkdo.info
@settitle Do List Mode 0.4

@c Before release, run C-u C-c C-u C-a
@c (texinfo-all-menus-update with a prefix arg). This
@c updates the node pointers, which texinfmt.el needs.

@copying
This manual is for emacs package dkdo version 0.4.

Copyright @copyright{} 2010â€“2013 David Keegan.

May be redistributed under the terms of the Free Software
Foundation GNU Free Documentation Licence.
@end copying

@dircategory Emacs misc features
@direntry
* Do List Mode: (dkdo).           Do List Editing Mode
@end direntry

@documentencoding UTF-8

@iftex
@finalout
@end iftex

@macro dkcmditem{key, key2, command}
@kindex \key\
@kindex \key2\
@findex \command\
@item @kbd{\key\}@tie{} (@kbd{\key2\}) (@code{\command\})
@end macro

@macro dkcmd{key, key2, command}
@kbd{\key\}@tie{} (@kbd{\key2\}) (@code{\command\})
@end macro

@macro dktag{text}
@samp{\text\}
@end macro

@macro NOW
@dktag{NOW}
@end macro

@macro LATER
@dktag{LATER}
@end macro

@macro DONE
@dktag{DONE}
@end macro

@titlepage
@title Do List Mode 0.4
@author David Keegan
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage
@contents

@ifnottex
@node Top
@top Do List Mode
This mode facilitates maintaining a freely editable task
list in a single file. It uses org mode's outlining,
visibility cycling, and lists/checkboxes for structuring
tasks, but in so far as it maintains the Do List in a
separate document and allows for continuous re-ordering of
tasks to reflect changing priorities, it provides an
alternative to org mode's TODO items feature.
@end ifnottex

@menu
* Introduction::
* Data::
* Operations::
* Version Control::
* Concept Index::
@end menu

@node Introduction
@chapter Introduction
@cindex Introduction

@menu
* Overview::
* Getting Started::
@end menu

@node Overview
@section Overview

DkTbd:

It keeps urgent tasks near the top of the file
and supports deferred and recurring tasks.
by automating frequent operations

@node Getting Started
@section Getting Started

To enable dkdo-mode, add this line to your emacs profile:

@lisp
(add-to-list 'auto-mode-alist '("\\.do$" . dkdo-mode))
@end lisp

Dkdo-mode mode binds a number of @kbd{C-c C-x <key>}
sequences. To bind the corresponding (shorter) @kbd{C-c
<key>} sequences in dkdo-mode, add the following line to
your emacs profile (optional but recommended):

@lisp
(add-hook 'dkdo-mode-hook 'dkdo-SetCcKeys)
@end lisp

Dkdo-mode can be customised via customisation group ``dk'',
subgroup ``dkdo''.

@node Data
@chapter Data
@cindex Data

@menu
* File Structure::
* Task Details::
* Time Interval::
@end menu

@node File Structure
@section File Structure

A Do List is a single file using org-mode headlines for
structure. It has three sections, @NOW{}, @LATER{}, and
@DONE{}, in that order and each consisting of a top-level
org-mode headline and its contents, which comprises a number
of tasks.

A task consists of an org-mode second level headline and its
contents. A third-level headline within a task is a subtask.
The task/subtask content starts immediately after the
headline prefix and includes the remainder of the headline
and any content, including any lower level sections (which
are not significant to this mode), and other structural
elements such as lists.

For example, here is a minimal do list with a couple of
tasks in section @NOW{} and empty @LATER{} and @DONE{}
sections:

@smallformat
@verbatim
* NOW:
** This is a Task:
- Do this thoroughly.
** A second Task, with checkboxes [1/2]:
- [X] Item 1.
- [ ] Item 2.

* LATER:

* DONE:
@end verbatim
@end smallformat

Urgent tasks and tasks currently being worked on live in
section @NOW{}. It is usually convenient to keep the most
urgent tasks closer to the beginning of the section.

Section @LATER{} contains dated tasks, generally in
reverse date order with the latest on top. Tasks which need
to be performed or reviewed on a perticular date remain in
this section until they become due, when they are usually
moved to section @NOW{} to be worked on (this move can
be automatic). This section is also a useful home for tasks
which are on hold pending action by others, and tasks which
have been deferred for later consideration.

Once completed, tasks are moved to the @DONE{} section,
where all tasks are prefixed with a timestamp representing
the completion date. This section is generally sorted in
chronological order and is useful as a historical record.

The intent of a subtask is to allow related items to be
collected and managed together and perhaps hidden from view
util they are being worked on. The relationship between a
subtask and its parent is not permanent and is broken at
some point before the subtask is completed. To ensure every
subtask is completed it is illegal to move a task
containing subtasks from section @NOW{} to section
@DONE{}. Instead each subtask must be moved
individually. A consequence of this is that subtasks do not
exist in section @DONE{}.

An alternative means of structuring a task or subtask is
where the task consists of a number of components or steps,
all of which must be completed before the task itself can be
considered completed. This situation is best handled by
means of an org-mode checkboxed list item in the task body
for each component. Unlike subtasks, checkboxed items are
tightly integrated into the task. The task headline line can
indicate the number or percentage of components currently
completed, and the task may be automatically moved to DONE
once all components have been checked (configurable DkTbd).

@node Task Details
@section Task Details

A task entry is a second level org-mode headline followed by
optional content on succeeding lines. It has the components
detailed below. Components are separated by whitespace.

@verbatim
<Prefix> [Completed] [Due [Repeater]] [Key:] HeadlineText.
[Content]
@end verbatim

Where:

@table @code
@item Prefix
An org-mode headline prefix, either @verb{**} for a task or
@verb{***} for a subtask.

@item Completed
An ISO format (YYYY-MM-DD HH:MM) completion timestamp. This
is prepended on entry to section @DONE{} and removed on exit
from section @DONE{}, so it does not appear in other
sections. The precision of the timestamp is customisable via
variable @code{dkdo-DoneTimestampLength}.

@item Due
An ISO format (YYYY-MM-DD[ HH:MM:SS]) due timestamp
indicating when the task is due to be completed. The
timestamp is prepended or updated when a task is moved to
section @LATER{}, and is retained when a task is moved to
other sections.

@item  Repeater
An optional repetition interval which is only effective in
section @LATER{}. @xref{Time Interval}.

@item Key
An optional key with a trailing colon. Useful for
identifying related tasks. Not significant to dkdo-mode.

@item HeadlineText
Arbitrary text constituting the remainder of the headline.
Ends with a newline.

@item Content
Optional task content. One or more lines of pretty much
arbitrary text. May contain org-mode headlines of level
three or lower, lists, checkboxes, etc. The task ends at the
next second or first level org-mode headline.

@end table

@node Time Interval
@section Time Interval

A time interval is specified in the following format:

@verbatim
<Digits><Unit>
@end verbatim

Where:

@table @code
@item Digits
An unsigned decimal integer. The unit must follow
immediately without intervening space.

@item Unit
A single character from the following y (year), m (month) w
(week), d (day), h (hour).
@end table

This is used as a repetition indicator on a task. It can
also be used as a relative time input for a date in which
case it may be preceded by a sign (+ or -).

@node Operations
@chapter Operations
@cindex Operations

@menu
* Operations Overview::
* Start New Task::
* Move to @DONE{}::
* Move to @LATER{}::
* Move to @NOW{}::
* Entering Times::
* Refresh Buffer::
* Refresh Timer::
@end menu

@node Operations Overview
@section Overview

Normal (org-mode) editing commands are not restricted in any
way, and indeed are necessary for initial entry of tasks
into the dolist. You are free to make any changes you wish
to the file content at any time, including changes that
break its structure as a do list. It is necessary to take
reasonable care to avoid such changes as unexpected outcomes
are likely.

Do List mode provides a number of commands which automate
operations on tasks. These commands do respect and preserve
the structure of the file:

@table @asis
@dkcmditem{C-c C-x d, C-c d, dkdo-TaskDone}
Move the current task to section @DONE{}.
@xref{Move to @DONE{}, DONE}.

@dkcmditem{C-c C-x l, C-c l, dkdo-TaskToLater}
Move the current task to section @LATER{}.
@xref{Move to @LATER{}, LATER}.

@dkcmditem{C-c C-x n, C-c n, dkdo-TaskToNow}
Move the current task to section @NOW{}.
@xref{Move to @NOW{}, NOW}.

@dkcmditem{C-c C-x r, C-c r, dkdo-BufferRefresh}
Refresh the buffer DkTbd: more.
@xref{Refresh Buffer}.

@dkcmditem{C-c C-x s, C-c s, dkdo-TaskStart}
Start a new task or subtask after the current task subtask.
@xref{Start New Task}.
@end table

Each move command applies to the @dfn{current} task, that is
the task in whose headline or content point currently lies.
When point is on a task headline or on any non-subtask
content, an operation applies to the whole task including
the subtasks. When point is on a subtask, it applies to the
subtask only. When a subtask is subject to a move operation,
it is detached from its parent and promoted to a task (by
adjusting its headline).

@node Start New Task
@section Start New Task

@dkcmd{C-c C-x s, C-c s, dkdo-TaskStart}

Inserts the headline prefix for a new task or subtask
immediately after the current task/subtask, and positions
point for editing the remainder of the headline and
contents, if any.

@node Move to @DONE{}
@section Move to @DONE{}

@dkcmd{C-c C-x d, C-c d, dkdo-TaskDone}

Moves the current task/subtask to section @DONE{},
indicating that it has been completed. It is prefixed in
section @DONE{} with the current time as a timestamp
representing the completion date. Should a task need to be
re-visited after completion, it can be moved to section
@NOW{} or section @LATER{}, which causes the completion
timestamp to be removed.

To change the completion timestamp, move the task from
@DONE{} to @DONE{}. This operation prompts for a replacement
timestamp. @xref{Entering Times}.

@node Move to @LATER{}
@section Move to @LATER{}

@dkcmd{C-c C-x l, C-c l, dkdo-TaskToLater}

Moves the current task/subtask to section @LATER{} and
prompts for a due date/time which is prefixed to the task
headline. @xref{Entering Times}.

This is the standard way to handle a task which needs to be
placed on hold pending action by others, or which needs to
be deferred for later consideration for some other reason.

Also the standard way to enter a task with a due date is to
insert it into section @NOW{} with @dkcmd{C-c C-x s, C-c s,
dkdo-TaskStart}, edit it as required but omit a due date,
and then move it to section @LATER{}, which will prompt for
the due date.

@node Move to @NOW{}
@section Move to @NOW{}

@dkcmd{C-c C-x n, C-c n, dkdo-TaskToNow}

Moves the current task/subtask to section @NOW{}. A task is
moved from section @LATER{} to section @NOW{} when it is to
be worked on, either because its due date has arrived, or
otherwise. The task due date prefix remains in place after
the move. While this move can be invoked manually, it is
usually triggered automatically by @dkcmd{C-c C-x r, C-c r,
dkdo-BufferRefresh} for tasks in section @LATER{} which have
become due.

A completed task is moved from section @LATER{} to section
@NOW{} in the event that it needs to be revisited and worked
on some more. In this case the task's completion date prefix
is removed.

@node Entering Times
@section Entering Times

Some move operations prompt for a date/time value, which is
inserted as a prefix to the task headline. On moving to
@LATER{}, it is the due date/time, usually in the future. On
moving from @DONE{} to @DONE{} it is the completion date,
usually in the past.

Time input is as for @code{org-read-date} but with some
differences:

@enumerate
@item
Only ISO dates (YYYY-MM-DD) are supported. DkTbd?

@item
A relative time may be input. @xref{Time Interval}.

@item
The leading sign can be omitted from a relative time,
provided the unit is present. In that case the shift is
presumed to be forward.

@item
A relative time is evaluated with respect to the current
time when moving a task from @NOW{} to @LATER{} or from
@DONE{} to @LATER{}. However when moving from @LATER{}
to @LATER or from @DONE{} to @LATER{} it is evaluated with
respect to the current task timestamp. DkTbd?
@end enumerate

@node Refresh Buffer
@section Refresh Buffer

@dkcmd{C-c C-x r, C-c r, dkdo-BufferRefresh}

The primary function of this operation, and the only
function when it is invoked by the @ref{Refresh Timer}, is to
scan section @LATER{} and move any tasks that have become
due (ie whose due date has arrived or been passed) to
section @NOW{}.

When invoked manually it also sorts tasks in each section,
and folds tasks so only the task level headlines are
visible.

@node Refresh Timer
@section Refresh Timer

The Refresh Timer is started on entry to dkdo-mode if
variable @code{dkdo-RefreshSeconds} has a value greater than
zero. While running, the timer calls @code{dkdo-BufferRefresh}
periodically at the specified interval to promote any due
tasks from section @LATER{} to section @NOW{}.

A change to @code{dkdo-RefreshSeconds} has no effect on an
existing dkdo-mode buffer until
@code{dkdo-RefreshTimerStartIf} is run while the buffer is
current to stop any existing timer and start a new one if
appropriate.

You can stop the timer at any time with
@code{dkdo-RefreshTimerStop}.

@node Version Control
@chapter Version Control
@cindex Version Control

@node Concept Index
@chapter Concept Index
@printindex cp

@bye
