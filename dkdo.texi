\input texinfo @c -*-texinfo-*-

@c %**start of header
@setfilename dkdo.info
@settitle Do List Mode 1.01
@c %**end of header

@syncodeindex fn cp
@syncodeindex vr cp
@syncodeindex ky cp

@c Before release, run C-u C-c C-u C-a
@c (texinfo-all-menus-update with a prefix arg). This
@c updates the node pointers, which texinfmt.el needs.

@copying
This manual is for emacs package dkdo version 1.01.

Copyright @copyright{} 2010â€“2013 David Keegan.

May be redistributed under the terms of the Free Software
Foundation GNU Free Documentation Licence.
@end copying

@dircategory Emacs misc features
@direntry
* Do List Mode: (dkdo).           Do List Editing Mode
@end direntry

@documentencoding UTF-8

@iftex
@finalout
@end iftex

@c Keybinding, Alternative Keybinding, Command as @item.
@macro dkcmditem{key, key2, command}
@item @kbd{\key\}@tie{} (@kbd{\key2\}) (@code{\command\})
@end macro

@c Keybinding, Alternative Keybinding, Command.
@macro dkcmd{key, key2, command}
@kbd{\key\}@tie{} (@kbd{\key2\}) (@code{\command\})
@end macro

@c Keybinding, Alternative Keybinding, Command with @kindex
@c and @findex entries.
@macro dkcmdidx{key, key2, command}
@kindex \key\
@kindex \key2\
@findex \command\
@kbd{\key\}@tie{} (@kbd{\key2\}) (@code{\command\})
@end macro

@macro dktag{text}
@samp{\text\}
@end macro

@macro NOW
@dktag{NOW}
@end macro

@macro LATER
@dktag{LATER}
@end macro

@macro DONE
@dktag{DONE}
@end macro

@titlepage
@title Do List Mode 1.01
@author David Keegan
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage
@contents

@ifnottex
@node Top
@top Do List Mode
@end ifnottex

@menu
* Introduction::
* Data::
* Operations::
* Index::
@end menu

@node Introduction
@chapter Introduction

@menu
* Overview::
* Getting Started::
* Known Issues::
* Changes::
@end menu

@node Overview
@section Overview

Do List Mode is a major mode supporting a freely editable
task list. It is based on org-mode, and org-mode features
like outlining, visibility cycling, and lists/checkboxes are
used for structuring and managing tasks. However in so far
as it maintains the Do List in a separate document and
allows for continuous re-ordering of tasks to reflect
changing priorities, it provides an alternative to org
mode's TODO items feature.

It keeps urgent tasks near the top of the file to maximise
visibility and supports deferred and recurring tasks.

@node Getting Started
@section Getting Started

To enable dkdo-mode for files with suffix @file{.do}, add
this line to your emacs profile:

@lisp
(add-to-list 'auto-mode-alist '("\\.do$" . dkdo-mode))
@end lisp

Dkdo-mode mode binds a number of @kbd{C-c C-x <key>}
sequences. To bind the corresponding (shorter) @kbd{C-c
<key>} sequences (in dkdo-mode only), add the following line
to your emacs profile (optional but recommended):

@lisp
(add-hook 'dkdo-mode-hook 'dkdo-SetCcKeys)
@end lisp

To load some sample data, open an empty file in dkdo-mode,
respond @samp{no} to the @samp{insert sections} prompt,
and respond @samp{yes} to the @samp{load sample} prompt.

Dkdo-mode can be customised via customisation group @code{dk},
subgroup @code{dkdo}.

@node Known Issues
@section Known Issues

All timestamps in the do list must be in ISO format
(YYYY-MM-DD). Other formats are not supported.

@node Changes
@section Changes

Package dkdo was written between 2010-07-23 and 2010-11-24
to replace manual editing of a similarly structured do list
file.

@table @asis
@item Version 1.1 20131104:
Initial release as package.
@end table

@node Data
@chapter Data

@menu
* File Structure::
* Sections and Tasks::
* Subtasks::
* Checkboxes::
* Task/Subtask Details::
* Time Interval::
@end menu

@node File Structure
@section File Structure

@cindex section
A Do List is a single file using org-mode headlines for
structure. It has three sections, @NOW{}, @LATER{}, and
@DONE{}, in that order and each consisting of a top-level
org-mode headline and its content. The content comprises of
a number of tasks. A @dfn{section} begins at the beginning
of a top level headline prefix, and finishes just before the
next top level headline prefix in the file, or at the end of
file.

@cindex task
@cindex content, task
A @dfn{task} consists of a structured org-mode second level
headline and its content. It begins at the beginning of the
second level headline prefix, and ends just before the
beginning of the next second or top level headline prefix in
the file, or at the end of file. The headline is the first
line of the task, and subsequent lines, if any, are the
@dfn{content}. See also @ref{Task/Subtask Details}.

@cindex subtask
A subtask is similar to a task (see above) except that it
begins with a third level org-mode headline.
@xref{Task/Subtask Details}.

For example, here is a do list with tasks in all sections:

@smallformat
@verbatim
* NOW:
** This is a Task.
This one is really urgent.

** This is a second Task:
- Needs to be done quickly.

* LATER:
** 2013-09-29 This task is due 29 September.
** 2013-10-04 This task is due 4 October.

* DONE:
** 2013-09-28 08:17 This task was completed 28 September at 08:17.

@end verbatim
@end smallformat

@node Sections and Tasks
@section Sections and Tasks

Urgent tasks and tasks currently being worked on belong in
section @NOW{}. It is usually convenient to keep the most
urgent tasks closer to the beginning of the section.
Ordering is left to the user and section @NOW{} is not
sorted automatically, but when tasks are inserted
automatically they are positioned chronologically by due
date with respect to existing dated tasks starting from the
beginning of the section.

Section @LATER{} contains tasks which have a due date, and
is sorted in chronological order by due date (ie with the
most urgent tasks near the top). Calendar appointments and
tasks which need to be performed or reviewed by a particular
date remain in this section until they become actionable,
and are usually then moved to section @NOW{} to be worked on
(this move can be automatic).

Section @LATER{} is also a useful home for tasks which are
on hold pending action by others, and tasks which have been
deferred for later consideration.

@anchor{Actionable}
@cindex actionable
To allow for preparation, a task becomes @dfn{actionable} a
certain amount of time before its due date. This preparation
time is customisable via variable
@code{dkdo-ActionableNoticeHours}, and can be adjusted to
consist of working hours only via customisable variables
@code{dkdo-ActionableSkipAfterMidnight} and
@code{dkdo-ActionableSkipBeforeMidnight}.

Once completed, tasks are moved to section @DONE{}, where
all tasks are prefixed with a timestamp representing the
completion date. This section is useful as a historical
record, and is sorted in chronological order by completion
date.

@node Subtasks
@section Subtasks
@cindex subtask, intent
The intent of a subtask is to allow related items to be
collected and managed together and perhaps hidden from view
util they are being worked on.

When a task with subtasks is moved, its subtasks, if any,
are also moved. However when a subtask is moved individually
it is detached from its parent and is promoted to a task.
Thus the relationship between a subtask and its parent is
not permanent.

To ensure every subtask is completed individually, it is
illegal to move a task containing subtasks to section
@DONE{}. Instead each of its subtasks must be moved to
section @DONE{} individually. A consequence of this is that
subtasks should not exist in section @DONE{}.
@xref{Task/Subtask Details}.

For example, here is a task with subtasks:

@smallformat
@verbatim
* NOW:
** This is a Task with two subtasks:
Arbitrary content of main task.
*** Subtask1.
Content of Subtask1.
More content of Subtask1.
*** Subtask2
- Content as a list item.
- Another list item.

@end verbatim
@end smallformat

@node Checkboxes
@section Checkboxes
@cindex checkbox
@cindex list
Often task or subtask consists of a number of components or
steps, all of which must be completed before the task itself
can be considered completed. This situation is best handled
by means of an org-mode checkboxed list item in the task
content for each component. Checkboxed items are tightly
integrated into the owning task/subtask. The headline line
can indicate the number or percentage of components
currently completed thanks to org-mode. @inforef{Checkboxes,
Org Mode Checkboxes, org}.

A checkboxed task or subtask may be automatically moved to
DONE once all components have been checked (customisable via
@code{dkdo-AutoFinishCheckedTasks}).

@smallformat
@verbatim
* NOW:

** This is a Task with a checkboxed list [0/2]:
- [ ] Item1.
      Content of Subtask1.
- [ ] Item with subitems [0/3]:
  - [ ] Subitem1.
  - [ ] Subitem2.
  - [ ] Subitem3.

@end verbatim
@end smallformat

@node Task/Subtask Details
@section Task/Subtask Details

@cindex task, details
@cindex task, definition
A task is a structured second level org-mode headline,
followed by optional free-form content on succeeding lines.
A subtask differs from a task only in that it has a third
level headline prefix.

The headline has a number of components. They are separated
by whitespace, and the headline is terminated by a newline.

The task/subtask components are detailed below:

@verbatim
<Prefix> [Completed] [Due [Repetition]] [Key:] HeadlineText.
[Content]
@end verbatim

Where:

@table @code
@cindex prefix
@item Prefix
An org-mode headline prefix, either @samp{**} for a task or
@samp{***} for a subtask.

@cindex timestamp, completion
@cindex completion timestamp
@cindex task completion timestamp
@item Completed
An ISO format (@samp{YYYY-MM-DD HH:MM}) completion
timestamp. This is prepended on entry to section @DONE{} and
removed on exit from section @DONE{}, so it does not appear
in other sections. The precision of the timestamp is
customisable via variable @code{dkdo-DoneTimestampLength}.

@cindex due timestamp
@cindex timestamp, due
@cindex due date
@cindex date, due
@item Due
An ISO format (@samp{YYYY-MM-DD[HH:MM:SS]}) due date
indicating when the task is due to be completed. The
date is prepended or updated when a task is moved to
section @LATER{}, and is retained when a task is moved to
other sections. If any of @samp{HH:MM:SS} are omitted,
zeroes are assumed.

@cindex repeater
@cindex repetition interval
@item  Repetition
An optional repetition interval, acted on only in the event
of a move from section @LATER{}. See @ref{Time Interval} and
@ref{Recurring Tasks}.

@cindex key, task
@cindex task key
@item Key
An optional key with a trailing colon. Useful for
identifying related tasks. Not acted on by @code{dkdo-mode}.

@item HeadlineText
Arbitrary text constituting the remainder of the headline.
Ends with a newline.

@cindex content, task
@cindex task content
@item Content
Optional task/subtask content. One or more lines of pretty
much arbitrary text. May contain org-mode headlines of level
three or lower, lists, checkboxes, etc. The task ends at the
next second or first level org-mode headline.

@end table

@node Time Interval
@section Time Interval

A time interval is specified in the following format:

@cindex time interval
@verbatim
<Digits><Unit>
@end verbatim

Where:

@table @code
@item Digits
An unsigned decimal integer. The unit must follow
immediately without intervening space.

@item Unit
A single character from the following y (year), m (month) w
(week), d (day), h (hour).
@end table

It is used as a repetition interval on a recurring task. It
can also be used as a relative time input for a date in
which case it may be preceded by a sign (+ or -).

@node Operations
@chapter Operations

@menu
* Operations Overview::
* Start New File::
* Start New Task::
* Move to DONE::
* Move to LATER::
* Move to NOW::
* Recurring Tasks::
* Entering Times::
* Refresh Buffer::
* Refresh Timer::
@end menu

@node Operations Overview
@section Overview

@cindex editing
Normal (org-mode) editing commands are not restricted in any
way, and indeed are necessary for initial entry of tasks
into the dolist. You are free to make any changes you wish
to the file content at any time, including changes that
break its structure as a do list. It is necessary to take
reasonable care to avoid such changes as unexpected outcomes
are likely.

Do List mode provides a number of commands which automate
operations on tasks and/or subtasks. These commands respect
and preserve the structure of the file as a do list:

@c Force xrefs to following line.
@table @asis
@dkcmditem{C-c C-x d, C-c d, dkdo-TaskDone}
Move the current task to section @DONE{}. @w{                     }
@xref{Move to DONE}.

@dkcmditem{C-c C-x l, C-c l, dkdo-TaskToLater}
Move the current task to section @LATER{}. @w{                    }
@xref{Move to LATER}.

@dkcmditem{C-c C-x n, C-c n, dkdo-TaskToNow}
Move the current task to section @NOW{}. @w{                      }
@xref{Move to NOW}.

@dkcmditem{C-c C-x r, C-c r, dkdo-BufferRefresh}
Refresh the buffer. @w{                                           }
@xref{Refresh Buffer}.

@dkcmditem{C-c C-x s, C-c s, dkdo-TaskStart}
Start a new task or subtask after the current task or subtask.
@xref{Start New Task}.
@end table

@cindex move command, application
Each move command applies to the @dfn{current} task or
subtask, that is the task or subtask in whose headline or
content point currently lies.

@cindex promote, subtask to task
When point is in a subtask's headline or content, the
subtask is moved, becomes detached from its parent task and
is @dfn{promoted} to a task in its own right (by adjusting its
headline prefix).

On the other hand, when point is in a task's headline or
content, but NOT on a subtask, a move applies to the task as
a whole including any subtasks. A task containing subtasks
can be moved from section @DONE{} to section @LATER{} and
back, but it is not possible to move a task containing
subtasks to @DONE{}, as each subtask must be completed and
therefore moved to @DONE{} individually.

@node Start New File
@section Start New File

@cindex new file
@cindex file, new
When dkdo-mode starts on an empty buffer, it prompts the
user with @samp{Empty dolist. Insert sections?} and on
confirmation calls function @code{dkdo-BufferPrepare} to
insert sections @NOW{}, @LATER{}, and @DONE{}.

@cindex sample do list
@cindex example do list
If the user rejects insertion of sections, dkdo-mode prompts
the user with @samp{Empty dolist. Load sample do file?} and
on confirmation calls function @code{dkdo-BufferLoadSample}
to load a sample do list file from the package directory
into the current buffer.

@node Start New Task
@section Start New Task

@dkcmdidx{C-c C-x s, C-c s, dkdo-TaskStart}

@cindex new task
@cindex task, new
Inserts the headline prefix for a new task or subtask
immediately after the current task/subtask, and positions
point for editing the remainder of the headline and its
content (if any).

@node Move to DONE
@section Move to @DONE{}

@dkcmdidx{C-c C-x d, C-c d, dkdo-TaskDone}

Moves the current task/subtask to section @DONE{},
indicating that it has been completed. It is prefixed in
section @DONE{} with the current time as a timestamp
representing the completion date, and is inserted in the
appropriate chronological position by completion date.
Should a task need to be re-visited after completion, it can
be moved to section @NOW{} or section @LATER{} (causes the
completion timestamp to be removed).

To change a completion timestamp in section @DONE{}, move
the task from @DONE{} to @DONE{}. This operation prompts for
a replacement completion timestamp. @xref{Entering Times}.

@node Move to LATER
@section Move to @LATER{}

@dkcmdidx{C-c C-x l, C-c l, dkdo-TaskToLater}

Moves the current task/subtask to section @LATER{} and
prompts for a due date/time which is prefixed to the task
headline. The task is inserted at the appropriate
chronological position by due date. @xref{Entering Times}.

This is the standard way to handle a task which needs to be
placed on hold pending action by others, or which needs to
be deferred for later consideration for some other reason.

@cindex due date, entry of
Also the standard way to enter a task with a due date is to
insert it into section @NOW{} with @dkcmd{C-c C-x s, C-c s,
dkdo-TaskStart}, edit it as required but omit a due date,
and then move it to section @LATER{}, which will prompt for
the due date.

To change a due date in section @LATER{}, use @dkcmd{C-c C-x
l, C-c l, dkdo-TaskToLater} to move the task from section
@LATER{} to section @LATER{}. You can enter the new due date
at the prompt.

@node Move to NOW
@section Move to @NOW{}

@dkcmdidx{C-c C-x n, C-c n, dkdo-TaskToNow}

Moves the current task/subtask to section @NOW{}. The
chronological insert position is found by comparing its due
date with the due dates, if present, of existing tasks in
section @NOW{}, starting from the top.

A task is moved from section @LATER{} to section @NOW{} when
it is to be worked on, either because its due date is
imminent, or for some other reason. The task due date prefix
remains in place after the move.

This move can be applied to all actionable tasks/subtasks in
section @LATER{} in a single operation with @dkcmd{C-c C-x
r, C-c r, dkdo-BufferRefresh}, and can be automated by
enabling the Refresh Timer (@pxref{Refresh Timer}), which
calls @code{dkdo-BufferRefresh} periodically.
@xref{Actionable}.

A previously completed task is moved from section @DONE{} to
section @NOW{} in the event that it needs to be revisited
and worked on some more. In this case the task's completion
date prefix is removed.

@node Recurring Tasks
@section Recurring Tasks

A @dfn{recurring task} has a repetition interval after the
due date. @xref{Time Interval}.

Before a task with a repetition interval is moved from
section @LATER{} to a different section, it is cloned. The
repetition interval is removed from one copy, and that copy
is moved to the target section. The due date of the second
copy is shifted forward in time by the repetition interval
and the copy is moved to the appropriate new chronological
position in section @LATER{}.

For example in the following dolist the task in section
@LATER{} due on 2013-09-21 is recurring monthly.

@smallformat
@verbatim
* NOW:

* LATER:
** 2013-09-21 1m Reconcile Bank Account [/]:
- [ ] Download and print statement.
- [ ] Reconcile in accounts.
** 2013-09-24 Other task.

* DONE:

When the recurring task is becomes actionable the do list is
adjusted as follows:

@end verbatim
@end smallformat

@smallformat
@verbatim
* NOW:
** 2013-09-21 Reconcile Bank Account [/]:
- [ ] Download and print statement.
- [ ] Reconcile in accounts.

* LATER:
** 2013-09-24 Other task.
** 2013-10-21 1m Reconcile Bank Account [/]:
- [ ] Download and print statement.
- [ ] Reconcile in accounts.

* DONE:

@end verbatim
@end smallformat

@node Entering Times
@section Entering Times

@cindex date, entry of
@cindex time, entry of
Some move operations prompt for a date/time value, which is
inserted as a prefix to the task headline. On moving to
@LATER{}, the input value is the due timestamp, usually in
the future. On moving from @DONE{} to @DONE{} it is the
completion timestamp, usually in the past.

Time input is as for function @code{org-read-date} but note
the following:

@enumerate
@item
Only ISO dates (YYYY-MM-DD) are supported.

@item
When entering a relative time (@pxref{Time Interval}), the
leading sign can be omitted provided the unit is present. In
that case the shift is presumed to be forward.

@cindex relative time, evaluation of
@item
If a relative or partial time entered, it is evaluated with
respect to the current time when moving a task from @NOW{}
to @LATER{} or from @DONE{} to @LATER{}. However when moving
from @LATER{} to @LATER or from @DONE{} to @DONE{} it is
evaluated with respect to the current task timestamp.
@end enumerate

@node Refresh Buffer
@section Refresh Buffer

@dkcmdidx{C-c C-x r, C-c r, dkdo-BufferRefresh}

@cindex refresh, buffer
@cindex buffer refresh
The primary function of this operation, and the only
function when it is invoked by the Refresh Timer
(@pxref{Refresh Timer}), is to scan section @LATER{} and
move any tasks that have become actionable to section
@NOW{}. @xref{Actionable}.

When invoked manually, it also sorts tasks in sections
@LATER{} and @DONE{}, and folds tasks in all sections so
only the task level headlines are visible, and task content
is invisible.

@cindex conflict marker
@cindex version control
If @code{dkdo-BufferRefresh} finds a version control
conflict marker in the file it emits an error message and
makes no changes to the file. This gives the user a chance
to resolve conflicts first. The regular expression for a
conflict marker can be customised via variable
@code{dkmisc-ConflictMarkerRe} in customisation group
@code{dkmisc}.

@node Refresh Timer
@section Refresh Timer

@cindex refresh timer
@cindex timer, refresh
The Refresh Timer is started on entry to dkdo-mode if
variable @code{dkdo-RefreshSeconds} has a value greater than
zero. While running, the timer calls function
@code{dkdo-BufferRefresh} periodically at the specified
interval to move any actionable tasks from section @LATER{}
to section @NOW{}. @xref{Actionable}.

A change to @code{dkdo-RefreshSeconds} has no effect on an
existing dkdo-mode buffer until
@code{dkdo-RefreshTimerStartIf} is run while the buffer is
current. It stops any existing timer and starts a new one if
appropriate.

You can stop the timer at any time with
@code{dkdo-RefreshTimerStop}.

@node Index
@chapter Index
@printindex cp

@bye
