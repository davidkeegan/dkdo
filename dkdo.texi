\input texinfo @c -*-texinfo-*-

@setfilename dkdo.info
@settitle Do List Mode 0.4

@c Before release, run C-u C-c C-u C-a
@c (texinfo-all-menus-update with a prefix arg). This
@c updates the node pointers, which texinfmt.el needs.

@copying
This manual is for emacs package dkdo version 0.4.

Copyright @copyright{} 2010â€“2013 David Keegan.

May be redistributed under the terms of the Free Software
Foundation GNU Free Documentation Licence.
@end copying

@dircategory Emacs misc features
@direntry
* Do List Mode: (dkdo).           Do List Editing Mode
@end direntry

@documentencoding UTF-8

@iftex
@finalout
@end iftex

@titlepage
@title Do List Mode 0.4
@author David Keegan
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage
@contents


@ifnottex
@node Top
@top Do List Mode
This mode facilitates maintaining a freely editable task
list in a single file by automating many frequent
operations. It keeps urgent tasks near the top of the file
and supports deferred and recurring tasks.

It uses org mode's outlining, visibility cycling, and
lists/checkboxes for structuring tasks, but in so far as it
maintains the Do List in a separate document, it provides an
alternative to org mode's TODO items feature.
@end ifnottex

@menu
* Introduction::
* Structure::
* Operations::
* Version Control::
* Concept Index::

@end menu

@node Introduction
@chapter Introduction
@cindex Introduction

@node Structure
@chapter Structure
@cindex Structure

A Do List is a single file using org-mode headlines for
structure. It has three sections, @dfn{NOW}, @dfn{LATER},
and @dfn{DONE}, in that order and each consisting of a
top-level org-mode heading and its contents, which comprises
a number of tasks.

A task consists of an org-mode second level headline and its
contents. A third-level headline within a task is a subtask.
The task/subtask content starts immediately after the header
prefix and includes the remainder of the header and any
content, including any lower level sections (which are not
significant to this mode), and other structural elements
such as lists.

For example, here is a minimal do list with a couple of
tasks in section @dfn{NOW} and empty @dfn{LATER} and @dfn{DONE}
sections:

@smallformat
@verbatim
* NOW:
** This is a Task:
- Do this thoroughly.
** A second Task, with checkboxes [1/2]:
- [X] Item 1.
- [ ] Item 2.

* LATER:

* DONE:
@end verbatim
@end smallformat

Urgent tasks and tasks currently being worked on live in
section @dfn{NOW}. It is usually convenient to keep the most
urgent tasks closer to the beginning of the section.

Section @dfn{LATER} contains dated tasks, generally in
reverse date order with the latest on top. Tasks which need
to be performed or reviewed on a perticular date remain in
this section until they become due, when they are usually
shifted to section @dfn{NOW} to be worked on (this shift can
be automatic). This section is also a useful home for tasks
which are on hold pending action by others, and tasks which
have been deferred for later consideration.

Once completed, tasks are moved to the @dfn{DONE} section,
where all tasks are prefixed with a timestamp representing
the completion date. This section is generally sorted in
chronological order and is useful as a historical record.

The intent of a subtask is to allow related items to be
collected and managed together and perhaps hidden from view
util they are being worked on. The relationship between a
subtask and its parent is not permanent and is broken at
some point before the subtask is completed. To ensure every
subtask is completed it is illegal to shift a task
containing subtasks from section @dfn{NOW} to section
@dfn{DONE}. Instead each subtask must be shifted
individually. A consequence of this is that subtasks do not
exist in section @dfn{DONE}.

An alternative means of structuring a task or subtask is
where the task consists of a number of components or steps,
all of which must be completed before the task itself can be
considered completed. This situation is best handled by
means of an org-mode checkboxed list item in the task body
for each component. Unlike subtasks, checkboxed items are
tightly integrated into the task.

@node Operations
@chapter Operations
@cindex Operations

When point is on a task header or on any non-subtask content, an
operation applies to the whole task including the subtasks. When
point is on a subtask, it applies to the subtask only. When a
subtask is shifted it is detached from its parent and promoted to
a task (by adjusting its header).

Checkboxed task components. The task header line can
indicate the number or percentage of components currently
completed, and the task may be automatically shifted to DONE
once all components have been checked (configurable).



@node Version Control
@chapter Version Control
@cindex Version Control

@node Concept Index
@chapter Concept Index
@printindex cp

@bye
