\input texinfo @c -*-texinfo-*-

@setfilename dkdo.info
@settitle Do List Mode 0.4

@c Before release, run C-u C-c C-u C-a
@c (texinfo-all-menus-update with a prefix arg). This
@c updates the node pointers, which texinfmt.el needs.

@copying
This manual is for emacs package dkdo version 0.4.

Copyright @copyright{} 2010â€“2013 David Keegan.

May be redistributed under the terms of the Free Software
Foundation GNU Free Documentation Licence.
@end copying

@dircategory Emacs misc features
@direntry
* Do List Mode: (dkdo).           Do List Editing Mode
@end direntry

@documentencoding UTF-8

@iftex
@finalout
@end iftex

@titlepage
@title Do List Mode 0.4
@author David Keegan
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage
@contents


@ifnottex
@node Top
@top Do List Mode
This is a do list mode for a user who needs to manipulate the
entries directly to adjust priorities. It uses org/outline mode to
make it easy to get an overview. Urgent tasks appear near the top
of the file, and can be made to move automatically to the top of
the file when they become due.
@end ifnottex

@menu
* Introduction::
* Data::
* Operations::
* Version Control::
* Concept Index::
@end menu

@node Introduction
@chapter Introduction
@cindex intro

A do file has top-level Sections NOW, LATER, and DONE. Each
second-level header within a section is a task. A
third-level header within a task is a subtask. The
task/subtask content starts immediately after the header
prefix and includes the remainder of the header and any
content, including any lower level sections (which are not
significant to this mode).

Dated tasks start life in LATER, other tasks in NOW. Tasks are
generally shifted LATER->NOW to be worked on (this shift can be
manual or automatic) and NOW->DONE when finished. On entering
DONE tasks are prefixed with a timestamp indicating the date of
completion. Tasks can also be shifted DONE->NOW if they are being
re-visited (the DONE timestamp is removed), or NOW-LATER to be
deferred (eg pending some other event). A task shifting to LATER
is prefixed with a new due date which is prompted for.

The intent of a subtask is to allow related items to be collected
and managed together and perhaps hidden from view util they are
being worked on. The relationship between a subtask and its
parent is not permanent and is broken at some point before the
subtask is completed. To ensure every subtask is processed it is
illegal to shift a task containing subtasks from NOW->DONE.
Instead each subtask must be shifted individually. A consequence
of this is that subtasks do not exist in DONE.

When point is on a task header or on any non-subtask content, an
operation applies to the whole task including the subtasks. When
point is on a subtask, it applies to the subtask only. When a
subtask is shifted it is detached from its parent and promoted to
a task (by adjusting its header).

An alternative approach to task breakdown is where the task
consists of a number of 'components', all of which must be
completed before the task itself can be considered completed.
This situation is handled by means of an org-mode checkboxed list
item in the task body for each component. The task header line
can indicate the number or percentage of components currently
completed, and the task may be automatically shifted to DONE
once all components have been checked (configurable). Unlike
subtasks, the components are tightly integrated into the task.

@node Data
@chapter Data
@printindex cp

@node Operations
@chapter Operations
@printindex cp

@node Version Control
@chapter Version Control
@printindex cp

@node Concept Index
@chapter Concept Index
@printindex cp

@bye
